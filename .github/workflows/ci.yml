name: CI

on:
  pull_request:
  push:
    # NOTE: Don't add other branches
    branches: deploy

jobs:
  test_build:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Run yarn install
        run: yarn install

      - name: Build [Staging] + Test
        run: env > .env && NODE_OPTIONS=--max_old_space_size=4096 yarn build:unsafe
        env:
          ENVIRONMENT: "staging"
          REACT_APP_ENV: "staging"
          REACT_APP_GRAPHQL_ENDPOINT: "https://helix-tools-api-staging.idmcdb.org/graphql"
          REACT_APP_GRAPHIQL_ENDPOINT: "https://helix-tools-api-staging.idmcdb.org/graphiql"
          REACT_APP_SWAGGER_ENDPOINT:  "https://helix-tools-api-staging.idmcdb.org/external-api/"
          GRAPHQL_CODEGEN_ENDPOINT: "https://helix-tools-api-staging.idmcdb.org/graphql"
          REACT_APP_MMP_ENDPOINT: "https://media-monitoring.idmcdb.org"
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
          REACT_APP_SENTRY_DSN: ${{ secrets.REACT_APP_SENTRY_DSN }}
          REACT_APP_HCATPCHA_SITEKEY: ${{ secrets.REACT_APP_HCATPCHA_SITEKEY }}

      - name: Upload artifacts [Staging]
        uses: actions/upload-artifact@v2
        if: github.event_name == 'push'
        with:
          name: client-build-staging
          path: build/

      - name: Build [Prod] + Test
        run: env > .env && NODE_OPTIONS=--max_old_space_size=4096 yarn build:unsafe
        if: github.event_name == 'push'
        env:
          ENVIRONMENT: "prod"
          REACT_APP_ENV: "prod"
          REACT_APP_GRAPHQL_ENDPOINT: "https://helix-tools-api.idmcdb.org/graphql"
          REACT_APP_GRAPHIQL_ENDPOINT: "https://helix-tools-api.idmcdb.org/graphiql"
          REACT_APP_SWAGGER_ENDPOINT:  "https://helix-tools-api.idmcdb.org/external-api/"
          GRAPHQL_CODEGEN_ENDPOINT: "https://helix-tools-api.idmcdb.org/graphql"
          REACT_APP_MMP_ENDPOINT: "https://media-monitoring.idmcdb.org"
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
          REACT_APP_SENTRY_DSN: ${{ secrets.REACT_APP_SENTRY_DSN }}
          REACT_APP_HCATPCHA_SITEKEY: ${{ secrets.REACT_APP_HCATPCHA_SITEKEY }}

      - name: Upload artifacts [Prod]
        uses: actions/upload-artifact@v2
        if: github.event_name == 'push'
        with:
          name: client-build-prod
          path: build/

  staging_deploy:
    name: Deploy (STAGING)
    needs: test_build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    environment:
      name: staging
      url: https://helix.staging.tools.idmcdb.org

    steps:
      - uses: actions/download-artifact@v1
        with:
          name: client-build-staging
          path: build

      # Copy build to S3
      - name: S3 Sync
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          SOURCE_DIR: './build'

      # Invalidate Cloudfront (this action)
      - name: Cloudfront Invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          PATHS: '/index.html'

  prod_deploy:
    name: Deploy (PROD)
    needs: [test_build, staging_deploy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment:  # PROD
      name: prod
      url: https://helix.tools.idmcdb.org

    steps:
      - uses: actions/download-artifact@v1
        with:
          name: client-build-prod  # PROD
          path: build

      # Copy build to S3
      - name: S3 Sync
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          SOURCE_DIR: './build'

      # Invalidate Cloudfront (this action)
      - name: Cloudfront Invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          PATHS: '/index.html'
